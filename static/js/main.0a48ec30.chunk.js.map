{"version":3,"sources":["components/Circle.tsx","components/BackgroundCircle.tsx","components/Eye.tsx","components/Eyes.tsx","components/FaceContainer.tsx","components/Arc.tsx","components/Mouth.tsx","components/Face.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Circle","cx","cy","radius","strokeWidth","fill","stroke","r","BackgroundCircle","Eye","offsetX","offsetY","Eyes","eyeOffsetX","eyeOffsetY","FaceContainer","children","width","height","centerX","centerY","transform","Arc","innerRadius","outerRadius","startAngle","endAngle","arco","arc","d","undefined","Mouth","Math","PI","Face","eyeRadius","mouthWidth","mouthRadius","array","range","App","map","value","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a48ec30.chunk.js","sourcesContent":["import React from 'react';\nimport { CircleProps } from '../interfaces/CircleProps';\n\nexport const Circle = ({ cx, cy, radius, strokeWidth, fill, stroke }: CircleProps) => (\n    <circle\n        cx={cx}\n        cy={cy}\n        r={radius}\n        strokeWidth={strokeWidth}\n        fill={fill}\n        stroke={stroke}\n    />\n)","import React from \"react\";\nimport { Circle } from \"./Circle\";\n\nexport const BackgroundCircle = ({ radius, strokeWidth }: {radius: number, strokeWidth: number}) => (\n    <Circle radius={radius} strokeWidth={strokeWidth} fill='yellow' stroke='black'/>\n);","import React from \"react\";\nimport { Circle } from \"./Circle\";\n\nexport const Eye = ({ offsetX, offsetY, radius }: {offsetX: number, offsetY: number, radius: number}) => (\n  <Circle cx={offsetX} cy={offsetY} radius={radius}/>\n)","import React from \"react\";\nimport { Eye } from './Eye';\n\nexport const Eyes = ({ eyeOffsetX, eyeOffsetY, radius }: {eyeOffsetX: number, eyeOffsetY: number, radius: number}) => (\n    <>\n        <Eye offsetX={-eyeOffsetX} offsetY={-eyeOffsetY} radius={radius}/>\n        <Eye offsetX={+eyeOffsetX} offsetY={-eyeOffsetY} radius={radius}/>\n    </>\n)","import React from \"react\";\nimport { FaceContainerProps } from \"../interfaces/FaceContainerProps\";\n\nexport const FaceContainer = ({ children, width, height, centerX, centerY }: FaceContainerProps) => (\n    <svg width={width} height={height}>\n        <g transform={`translate(${centerX}, ${centerY})`}>\n            {children}\n        </g>\n    </svg>\n)","import React from \"react\";\nimport { arc } from 'd3';\nimport { ArcProps } from '../interfaces/ArcProps'\n\nexport const Arc = ({ innerRadius, outerRadius, startAngle, endAngle }: ArcProps) => {\n    const arco = arc<void>()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .startAngle(startAngle)\n        .endAngle(endAngle)\n\n    return <path d={arco() ?? undefined}/>\n}\n","import React from \"react\"\nimport { Arc } from \"./Arc\"\n\n\nexport const Mouth = ({ width, radius }: { width: number, radius: number }) => (\n    <Arc\n        innerRadius={radius}\n        outerRadius={radius + width}\n        startAngle={Math.PI / 2}\n        endAngle={Math.PI * 3 / 2}\n    />\n)","import React from \"react\";\nimport { FaceProps } from \"../interfaces/FaceProps\";\nimport { BackgroundCircle } from \"./BackgroundCircle\";\nimport { Eyes } from \"./Eyes\";\nimport { FaceContainer } from \"./FaceContainer\";\nimport { Mouth } from \"./Mouth\";\n\nexport const Face = ({\n    width,\n    height,\n    centerX,\n    centerY,\n    eyeRadius,\n    strokeWidth,\n    eyeOffsetX,\n    eyeOffsetY,\n    mouthWidth,\n    mouthRadius\n  }: FaceProps) => (\n      <FaceContainer\n        width={width}\n        height={height}\n        centerX={centerX}\n        centerY={centerY}\n      >\n        <BackgroundCircle radius={centerY - strokeWidth / 2} strokeWidth={strokeWidth} />\n        <Eyes eyeOffsetX={eyeOffsetX} eyeOffsetY={eyeOffsetY} radius={eyeRadius} />\n        <Mouth width={mouthWidth} radius={mouthRadius} />\n      </FaceContainer>\n    )","import React from 'react';\nimport './App.css';\n\nimport { range } from 'd3';\nimport { Face } from './components/Face';\n\nconst width = 200;\nconst height = 200;\n\nconst array = range(9*3);\n\nconst App = () => (\n  <>\n    {array.map((value: number) => (\n    <Face\n      key={value}\n      width={width}\n      height={height}\n      centerX={width / 2}\n      centerY={height / 2}\n      eyeRadius={10}\n      strokeWidth={10}\n      eyeOffsetX={30}\n      eyeOffsetY={30}\n      mouthWidth={10}\n      mouthRadius={40}\n    />\n  ))}\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}